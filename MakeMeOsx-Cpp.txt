# Set the minimum required version of CMake for the project.
# @input = VERSION <version>
cmake_minimum_required(VERSION 3.25)

# Set your project name and C++ standard
project(<project_name>)
set(CMAKE_CXX_STANDARD <versionNumber>)

# Set additional compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wconversion -Wall -Werror -Wextra -pedantic")

# Set the target architecture(s) for macOS, thereby
# controlling which architectures are built and supported in your project.
set(CMAKE_OSX_ARCHITECTURES <osx_arch>)

# Add your main executable sources to the target
add_executable(<main_executable> ex1.cpp ex2.cpp ex3.cpp)

# Link the main executable with any necessary libraries
target_link_libraries(<main_executable> PRIVATE <linkedLibraries>)

# Set the C++ standard for the main executable
target_compile_features(<main_executable> PRIVATE <cpp_standard>)

## Set additional compiler flags for the target
#target_compile_options(<main_executable> PRIVATE -g3 -O3 -DDEBUG)

# Set additional compiler flags for the target
# The following CMake variables define configurations: CMAKE_CXX_FLAGS_DEBUG, CMAKE_CXX_FLAGS_RELEASE, CMAKE_CXX_FLAGS_RELWITHDEBINFO, CMAKE_CXX_FLAGS_MINSIZEREL
target_compile_options(<main_executable> PRIVATE "$<$<CONFIG:Release>:-O3 -DNDEBUG>")
target_compile_options(<main_executable> PRIVATE "$<$<CONFIG:Debug>:-g3 -DDEBUG>")
target_compile_options(<main_executable> PRIVATE "$<$<CONFIG:RelWithDebInfo>:-g3 -O3>")
target_compile_options(<main_executable> PRIVATE "$<$<CONFIG:MinSizeRel>:-Os -g0 -finline-functions -flto -fomit-frame-pointer")

# Define the test executable and link it with the test source file(s)
add_executable(<test_executable> test1.cpp test2.cpp test3.cpp)

# OPTIONAL: Find and load an external package
find_package(<package_name> REQUIRED)

# Add the path to the folder containing the custom test framework header
include_directories(<custom_test_framework_dir>)

# Set the C++ standard for the test executable
target_compile_features(<test_executable> PRIVATE <cpp_standard>)

# Set additional compiler flags for the target
target_compile_options(<test_executable> PRIVATE -g3 -O3 -DDEBUG)

# Link the test executable with any necessary libraries
target_link_libraries(test_bs PRIVATE <linkedLibraries>)

enable_testing()

add_test(NAME test_default_ctor COMMAND Program_tests.cpp)

set_source_files_properties(source1.cpp PROPERTIES COMPILE_FLAGS <flags>)


#add_library(bs-from-scratch)
